@page "/userauthenticationupdate/{id:guid}"
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>UserAuthentication - @Id</PageTitle>
<h3>UserAuthentication - @Id</h3>

<EditForm Model="Model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="refreshtoken">İsim:</label>
        <InputText id="refreshtoken" @bind-Value="Model.RefreshToken" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Kaydet</button>

</EditForm>

@code
{
    [Parameter]
    public Guid Id { get; set; }
    private ServiceResponse<UserAuthenticationResponse>? Response { get; set; }
    private Utilize.UserAuthenticationUpdate Model { get; set; } = new Utilize.UserAuthenticationUpdate();

    protected override async Task OnInitializedAsync()
    {
        Response = await Http.GetFromJsonAsync<ServiceResponse<UserAuthenticationResponse>>
        ($"https://localhost:7046/api/userauthenticationsingle?id={Id}");

        if (Response != null && Response.Data != null)
        {
            Model = new Utilize.UserAuthenticationUpdate
            {
                Id = Response.Data.Id,
                RefreshToken = Response.Data.RefreshToken,
                RefreshTokenExpireTime = Response.Data.RefreshTokenExpireTime
            };
        }
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage Result = await Http.PutAsJsonAsync("https://localhost:7046/api/userauthentication", Model);
        NavManager.NavigateTo("/userauthentication");
    }
}